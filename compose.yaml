########################### NETWORKS
networks:
  mediaserver:
    driver: bridge
  socket-proxy:
    driver: bridge

services:
########################### REVERSE PROXY / NETWORKING / SECURITY    
  # Traefik 3 - Reverse Proxy
  traefik:
    image: traefik:v3
    container_name: traefik
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "traefik", "healthcheck", "--ping"]
      interval: 10s
      timeout: 5s
      retries: 3
      start_period: 5s
    security_opt:
      - no-new-privileges:true
    depends_on:
      socket:
        condition: service_started
    networks:
      mediaserver:
      socket-proxy:
    ports:
      - 89:80
      - 449:443
    command: # CLI arguments
      # Dashboard, Ping, Telemetry
      - --global.sendAnonymousUsage=true
      - --global.checknewversion=true
      - --api.dashboard=true
      - --api.insecure=false
      - --ping=true
      # Providers, Entrypoints
      - --providers.docker=true
      - --providers.docker.endpoint=tcp://socket:2375 # Enable for Socket Proxy. Disable otherwise.
      - --providers.docker.exposedByDefault=true
      - --providers.docker.network=socket-proxy # Change to your container network, if not using socket
      # - --providers.docker.endpoint=unix:///var/run/docker.sock # Disable for Socket Proxy. Enable otherwise.
      - --providers.file.directory=/rules # Load dynamic configuration from one or more .toml or .yml files in a directory
      - --providers.file.watch=true # Only works on top level files in the rules folder
      - --entrypoints.http.address=:80
      - --entrypoints.https.address=:443
      - --entrypoints.traefik.address=:8080
      - --entrypoints.ping.address=:8081
      # Redirect to https
      - --entrypoints.http.http.redirections.entrypoint.to=https
      - --entrypoints.http.http.redirections.entrypoint.scheme=https
      - --entrypoints.http.http.redirections.entrypoint.permanent=true
      - --entrypoints.https.forwardedHeaders.trustedIPs=$LOCAL_IPS # Add $CLOUDFLARE_IPS if using CF tunnel
      # Logging
      - --log=true
      - --log.compress=true
      - --log.level=ERROR # (Default: error) DEBUG, INFO, WARN, ERROR, FATAL, PANIC
      - --log.maxSize=1
      - --log.maxAge=3
      - --log.maxbackups=3
      - --log.filepath=/logs/traefik.log
      - --accesslog=true
      - --accesslog.addinternals=true
      - --accesslog.filepath=/logs/access.log
      - --accessLog.filters.statusCodes=204-299,400-499,500-599
      - --accessLog.bufferingSize=60 # Configuring a buffer of 60 lines
      # TLS
      # - --serversTransport.insecureSkipVerify=true
      - --entrypoints.https.http.tls=true
      - --certificatesresolvers.cloudflare.acme.tlschallenge=true # disable this and enable below to avoid rate-limiting
      # - --certificatesresolvers.cloudflare.acme.caserver=https://acme-staging-v02.api.letsencrypt.org/directory
      - --entrypoints.https.http.tls.certresolver=cloudflare
      - --entrypoints.https.http.tls.domains[0].main=$DOMAINNAME
      - --entrypoints.https.http.tls.domains[0].sans=*.$DOMAINNAME
      - --certificatesresolvers.cloudflare.acme.email=$CF_EMAIL
      - --certificatesresolvers.cloudflare.acme.storage=/acme.json
      - --certificatesResolvers.cloudflare.acme.dnsChallenge.provider=cloudflare
      - --certificatesResolvers.cloudflare.acme.dnsChallenge.resolvers=1.1.1.1:53,1.0.0.1:53
      - --certificatesResolvers.cloudflare.acme.dnsChallenge.propagation.delayBeforeChecks=90
    volumes:
      - $DOCKERDIR/certs/acme.json:/acme.json
      - $APPDIR/traefik/rules:/rules
      - $APPDIR/traefik/logs:/logs
    environment:
      - TZ=$TZ
      - CF_API_EMAIL=$SMTP_USER
      - CF_API_KEY=$CF_MASTERAPI
      - DOMAINNAME # Passing the domain name to use the variable in rules.
    labels:
      # HTTP Routers - Dashboard
      - traefik.http.routers.dashboard.entrypoints=https
      - traefik.http.routers.dashboard.rule=Host(`traefik.$DOMAINNAME`)
      # Middlewares
      - traefik.http.routers.dashboard.middlewares=oauth
      # Services - API
      - traefik.http.routers.dashboard.service=api@internal
      - traefik.http.services.api.loadbalancer.server.port=8080
      ## Updating and notifications
      - org.hotio.pullio.notify=true
      - org.hotio.pullio.update=true
      - org.hotio.pullio.discord.webhook=$DISCORD
      - org.hotio.pullio.generic.webhook=$PULLIO

  # Socket proxy - avoid granting WAN access to docker.sock
  socket:
    image: lscr.io/linuxserver/socket-proxy:latest
    container_name: socket
    restart: unless-stopped
    networks:
      socket-proxy:
    read_only: true
    tmpfs:
      - /run
    environment:
      - CONTAINERS=1 #optional
      - DISABLE_IPV6=1 #optional
      - EVENTS=1 #optional
      - INFO=1 #optional
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro

  # Google OAuth - Single Sign On using OAuth 2.0
  oauth:
    image: thomseddon/traefik-forward-auth:latest
    container_name: oauth
    restart: unless-stopped
    networks:
      mediaserver:
    environment:
      - CONFIG=/config
      - COOKIE_DOMAIN=$DOMAINNAME
      - INSECURE_COOKIE=true # apparently needed for http entrypoints
      - AUTH_HOST=oauth.$DOMAINNAME
      - URL_PATH=/_oauth
      - LOG_LEVEL=warn # set to trace while testing bypass rules
      - LIFETIME=2592000 # 30 days, in seconds
      - DEFAULT_ACTION=auth
      - DEFAULT_PROVIDER=google
      - PROVIDERS_GOOGLE_CLIENT_ID=$GOOGLEID
      - PROVIDERS_GOOGLE_CLIENT_SECRET=$GOOGLESECRET
      - SECRET=$SECRET
      - WHITELIST=$WHITELIST
    labels:
      # HTTP Routers
      - traefik.http.routers.oauth.entrypoints=https
      - traefik.http.routers.oauth.rule=Host(`oauth.$DOMAINNAME`)
      # Middlewares
      - traefik.http.middlewares.oauth.forwardauth.address=http://oauth:4181
      - traefik.http.middlewares.oauth.forwardauth.authResponseHeaders=X-Forwarded-User
      # HTTP Services
      - traefik.http.services.oauth.loadbalancer.server.port=4181
      ## Updating and notifications
      - org.hotio.pullio.notify=true
      - org.hotio.pullio.update=true
      - org.hotio.pullio.discord.webhook=$DISCORD
      - org.hotio.pullio.generic.webhook=$PULLIO
      
  # Cloudflare DDNS - Dynamic DNS Updater
  cloudflare:
    image: oznu/cloudflare-ddns
    container_name: cloudflare
    restart: unless-stopped
    networks:
      mediaserver:
    environment:
      - TZ=$TZ
      - API_KEY=$CF_API_KEY
      - ZONE=$DOMAINNAME
      - PROXIED=false
      - RRTYPE=A
      - DELETE_ON_STOP=false
      - DNS_SERVER=1.1.1.1
      - CRON="@daily"
    labels:
      ## Updating and notifications
      - org.hotio.pullio.notify=true
      - org.hotio.pullio.update=true
      - org.hotio.pullio.discord.webhook=$DISCORD
      - org.hotio.pullio.generic.webhook=$PULLIO

  ############################# HOMEPAGE
  # Organizr - A dashboard for your server
  organizr:
    image: ghcr.io/organizr/organizr:latest
    container_name: organizr
    restart: unless-stopped
    networks:
      mediaserver:
    volumes:
      - $APPDIR/organizr:/config # Make sure your local config directory exists
    environment:
      - PUID=$PUID
      - PGID=$PGID
      - TZ=$TZ
    labels:
      # HTTP Routers
      - traefik.http.routers.organizr.entrypoints=https
      - traefik.http.routers.organizr.rule=Host(`$DOMAINNAME`)
      # HTTP Services
      - traefik.http.routers.organizr.service=organizr
      - traefik.http.services.organizr.loadbalancer.server.port=80
      ## Updating and notifications
      - org.hotio.pullio.notify=true
      - org.hotio.pullio.update=true
      - org.hotio.pullio.discord.webhook=$DISCORD
      - org.hotio.pullio.generic.webhook=$PULLIO
      
  ############################# INDEXERS
  # Prowlarr - Hydra and Jackett combined
  prowlarr:
    image: lscr.io/linuxserver/prowlarr:latest
    container_name: prowlarr
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:9696/ping || exit 1"]
      interval: 15s
      timeout: 3s
      retries: 3
      start_period: 15s
    networks:
      mediaserver:
    environment:
      - PUID=$PUID
      - PGID=$PGID
      - TZ=$TZ
    volumes:
      - $APPDIR/prowlarr:/config:rw
      - $DATADIR/torrents:/data/torrents:rw
      - $DATADIR/usenet:/data/usenet:rw
    labels:
      - dozzle ## Log viewer
      # HTTP Routers Auth Bypass (for NZB360)
      - traefik.http.routers.prowlarr-bypass.entrypoints=https
      - traefik.http.routers.prowlarr-bypass.rule=Host(`prowlarr.$DOMAINNAME`) && (Header(`X-Api-Key`, `$PROWLARR_API_KEY`) || Query(`apikey`, `$PROWLARR_API_KEY`))
      # HTTP Routers
      - traefik.http.routers.prowlarr.entrypoints=https
      - traefik.http.routers.prowlarr.rule=Host(`prowlarr.$DOMAINNAME`)
      # Middlewares
      - traefik.http.routers.prowlarr.middlewares=oauth
      # HTTP Services
      - traefik.http.routers.prowlarr.service=prowlarr
      - traefik.http.routers.prowlarr-bypass.service=prowlarr
      - traefik.http.services.prowlarr.loadbalancer.server.port=9696
      ## Updating and notifications
      - org.hotio.pullio.notify=true
      - org.hotio.pullio.update=true
      - org.hotio.pullio.discord.webhook=$DISCORD
      - org.hotio.pullio.generic.webhook=$PULLIO
      
  ############################# DOWNLOADERS
  # SABnzbd - nzb downloader
  sabnzbd:
    image: lscr.io/linuxserver/sabnzbd:latest
    container_name: sabnzbd
    restart: unless-stopped
    networks:
      mediaserver:
    environment:
      - PUID=$PUID
      - PGID=$PGID
      - TZ=$TZ
      - HAS_IPV6=false
    volumes:
      - $APPDIR/sabnzbd:/config
      - $DATADIR/usenet:/data/usenet:rw
    labels:
      - dozzle ## Log viewer
      # HTTP Routers Auth Bypass
      - traefik.http.routers.sabnzbd-bypass.entrypoints=https
      - traefik.http.routers.sabnzbd-bypass.rule=Host(`sabnzbd.$DOMAINNAME`) && (Header(`X-Api-Key`, `$SABNZBD_API_KEY`) || Query(`apikey`, `$SABNZBD_API_KEY`))
      # HTTP Routers
      - traefik.http.routers.sabnzbd.entrypoints=https
      - traefik.http.routers.sabnzbd.rule=Host(`sabnzbd.$DOMAINNAME`)
      # Middlewares
      - traefik.http.routers.sabnzbd.middlewares=oauth
      # HTTP Services
      - traefik.http.routers.sabnzbd.service=sabnzbd
      - traefik.http.routers.sabnzbd-bypass.service=sabnzbd
      - traefik.http.services.sabnzbd.loadbalancer.server.port=8080
      ## Updating and notifications
      - org.hotio.pullio.notify=true
      - org.hotio.pullio.update=true
      - org.hotio.pullio.discord.webhook=$DISCORD
      - org.hotio.pullio.generic.webhook=$PULLIO

  # qbittorrent - torrent downloader with VPN
  qbittorrent:
    image: ghcr.io/hotio/qbittorrent:latest
    container_name: qbittorrent
    restart: unless-stopped
    cap_add:
      - NET_ADMIN
    sysctls:
      - net.ipv4.conf.all.src_valid_mark=1
      - net.ipv6.conf.all.disable_ipv6=1
    devices:
      - /dev/net/tun:/dev/net/tun # Optional, if not on e.g. Syno NAS
    networks:
      mediaserver:
    environment:
      - PUID=$PUID
      - PGID=$PGID
      - TZ=$TZ
      - VPN_ENABLED=true
      - VPN_CLIENT=wireguard
      - VPN_CONF=wg0-fix
      - VPN_PROVIDER=generic
      - VPN_LAN_NETWORK=192.168.1.0/24
      - VPN_LAN_LEAK_ENABLED=false
      - VPN_AUTO_PORT_FORWARD=51007
      - VPN_KEEP_LOCAL_DNS=true
      - VPN_FIREWALL_TYPE=auto
      - VPN_HEALTHCHECK_ENABLED=true
      - PRIVOXY_ENABLED=false
      - UNBOUND_ENABLED=false
      - QBITTORRENTAPI_DO_NOT_VERIFY_WEBUI_CERTIFICATE=1
    volumes:
      - $APPDIR/qbittorrent:/config:rw
      - $DATADIR/torrents:/data/torrents:rw
      - $APPDIR/qbittorrent/anonymouse.sh:/etc/cont-init.d/anonymouse
    labels:
      - dozzle ## Log viewer
      # HTTP Routers
      - traefik.http.routers.qbittorrent.entrypoints=https
      - traefik.http.routers.qbittorrent.rule=Host(`qbittorrent.$DOMAINNAME`)
      # Middlewares
      - traefik.http.routers.qbittorrent.middlewares=oauth
      # HTTP Services
      - traefik.http.routers.qbittorrent.service=qbittorrent
      - traefik.http.services.qbittorrent.loadbalancer.server.port=8080
      ## Updating and notifications
      - org.hotio.pullio.notify=true
      - org.hotio.pullio.update=true
      - org.hotio.pullio.discord.webhook=$DISCORD
      - org.hotio.pullio.generic.webhook=$PULLIO
      
  # qbit_manage - torrent client management
  qbit_manage:
    image: bobokun/qbit_manage
    container_name: qbitmanage
    restart: unless-stopped
    networks:
      mediaserver:
    depends_on:
      sonarr: # artificial delay
        condition: service_healthy
    environment:
      - PUID=$PUID
      - PGID=$PGID
      - TZ=$TZ
      - QBT_SCHEDULE=360 # minutes - default is 1440 (once daily)
      - QBT_STARTUP_DELAY=30 # seconds
      - QBT_SKIP_QB_VERSION_CHECK=true
      - VERIFY_WEBUI_CERTIFICATE=False
    volumes:
      - $APPDIR/qbitmanage:/config:rw
      - $APPDIR/qbittorrent/:/qbittorrent/:ro
      - $DATADIR/torrents:/data/torrents:rw # same as qbittorrent download dir
    labels:
      - dozzle ## Log viewer
      # HTTP Routers
      - traefik.http.routers.qbitmanage.entrypoints=https
      # HTTP Services
      - traefik.http.routers.qbitmanage.service=qbitmanage
      - traefik.http.services.qbitmanage.loadbalancer.server.port=80
      ## Updating and notifications
      - org.hotio.pullio.notify=true
      - org.hotio.pullio.update=true
      - org.hotio.pullio.discord.webhook=$DISCORD
      - org.hotio.pullio.generic.webhook=$PULLIO

  # autobrr - torrent RSS downloader
  autobrr:
    image: ghcr.io/autobrr/autobrr:latest
    container_name: autobrr
    restart: unless-stopped
    networks:
      mediaserver:
    depends_on:
      sonarr: # artificial delay
        condition: service_healthy
    user: $PUID:$PGID
    volumes:
      - $APPDIR/autobrr:/config
    labels:
      # HTTP Routers Auth Bypass
      - traefik.http.routers.autobrr-bypass.entrypoints=https
      - traefik.http.routers.autobrr-bypass.rule=Host(`autobrr.$DOMAINNAME`) && (Header(`X-Api-Key`, `$AUTOBRR_API_KEY`) || Query(`apikey`, `$AUTOBRR_API_KEY`))
      # HTTP Routers
      - traefik.http.routers.autobrr.entrypoints=https
      - traefik.http.routers.autobrr.rule=Host(`autobrr.$DOMAINNAME`)
      # Middlewares
      - traefik.http.routers.autobrr.middlewares=oauth
      # HTTP Services
      - traefik.http.routers.autobrr-bypass.service=autobrr
      - traefik.http.routers.autobrr.service=autobrr
      - traefik.http.services.autobrr.loadbalancer.server.port=7474
      ## Updating and notifications
      - org.hotio.pullio.notify=true
      - org.hotio.pullio.update=true
      - org.hotio.pullio.discord.webhook=$DISCORD
      - org.hotio.pullio.generic.webhook=$PULLIO

  ############################# MEDIA SEARCH/INDEX
  # Radarr - Movies
  radarr:
    image: lscr.io/linuxserver/radarr:latest
    container_name: radarr
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:7878/ping || exit 1"]
      interval: 15s
      timeout: 3s
      retries: 3
      start_period: 15s
    networks:
      mediaserver:
    depends_on:
      sabnzbd:
        condition: service_started
      qbittorrent:
        condition: service_started
      prowlarr:
        condition: service_healthy
    environment:
      - PUID=$PUID
      - PGID=$PGID
      - TZ=$TZ
    volumes:
      - $APPDIR/radarr:/config
      - $DATADIR:/data
    labels:
      - dozzle ## Log viewer
      # HTTP Routers Auth Bypass
      - traefik.http.routers.radarr-bypass.entrypoints=https
      - traefik.http.routers.radarr-bypass.rule=Host(`radarr.$DOMAINNAME`) && (Header(`X-Api-Key`, `$RADARR_API_KEY`) || Query(`apikey`, `$RADARR_API_KEY`))
      # HTTP Routers
      - traefik.http.routers.radarr.entrypoints=https
      - traefik.http.routers.radarr.rule=Host(`radarr.$DOMAINNAME`)
      # Middlewares
      - traefik.http.routers.radarr.middlewares=oauth
      # HTTP Services
      - traefik.http.routers.radarr.service=radarr
      - traefik.http.routers.radarr-bypass.service=radarr
      - traefik.http.services.radarr.loadbalancer.server.port=7878
      ## Updating and notifications
      - org.hotio.pullio.notify=true
      - org.hotio.pullio.update=true
      - org.hotio.pullio.discord.webhook=$DISCORD
      - org.hotio.pullio.generic.webhook=$PULLIO
      
  # Sonarr - TV
  sonarr:
    image: lscr.io/linuxserver/sonarr:latest
    container_name: sonarr
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:8989/ping || exit 1"]
      interval: 15s
      timeout: 3s
      retries: 3
      start_period: 15s
    networks:
      mediaserver:
    depends_on:
      sabnzbd:
        condition: service_started
      qbittorrent:
        condition: service_started
      prowlarr:
        condition: service_healthy
    environment:
      - PUID=$PUID
      - PGID=$PGID
      - TZ=$TZ
    volumes:
      - $APPDIR/sonarr:/config
      - $DATADIR:/data
    labels:
      - dozzle ## Log viewer
      # HTTP Routers Auth Bypass
      - traefik.http.routers.sonarr-bypass.entrypoints=https
      - traefik.http.routers.sonarr-bypass.rule=Host(`sonarr.$DOMAINNAME`) && (Header(`X-Api-Key`, `$SONARR_API_KEY`) || Query(`apikey`, `$SONARR_API_KEY`))
      # HTTP Routers
      - traefik.http.routers.sonarr.entrypoints=https
      - traefik.http.routers.sonarr.rule=Host(`sonarr.$DOMAINNAME`)
      # Middlewares
      - traefik.http.routers.sonarr.middlewares=oauth
      # HTTP Services
      - traefik.http.routers.sonarr.service=sonarr
      - traefik.http.routers.sonarr-bypass.service=sonarr
      - traefik.http.services.sonarr.loadbalancer.server.port=8989
      ## Updating and notifications
      - org.hotio.pullio.notify=true
      - org.hotio.pullio.update=true
      - org.hotio.pullio.discord.webhook=$DISCORD
      - org.hotio.pullio.generic.webhook=$PULLIO

  ############################# HOME THEATRE
  # Plex - Media Player
  plex:  
    image: lscr.io/linuxserver/plex:latest
    container_name: plex
    restart: unless-stopped
    networks:
      mediaserver:
    ports:
      - 32400:32400
    devices: # optional (used if Syno has Intel CPU, for HW transcoding)
      - /dev/dri:/dev/dri
    environment:
      - PUID=${PUID}
      - PGID=${PGID}
      - TZ=${TZ}
      # - PLEX_CLAIM=${PLEX_TOKEN} #only needed when first claiming server
    volumes:
      - ${APPDIR}/plex:/config:rw
      - ${DATADIR}/media:/data/media:rw
      - /tmp:/transcode
    labels:
      - dozzle ## Log viewer
      # HTTP Routers
      - traefik.http.routers.plex.entrypoints=https
      - traefik.http.routers.plex.rule=Host(`plex.$DOMAINNAME`)
      # HTTP Services
      - traefik.http.routers.plex.service=plex
      - traefik.http.services.plex.loadbalancer.server.port=32400
      ## Updating and notifications
      - org.hotio.pullio.notify=true
      - org.hotio.pullio.update=true
      - org.hotio.pullio.discord.webhook=$DISCORD
      - org.hotio.pullio.generic.webhook=$PULLIO

  ############################# PLEX MONITORING/MANAGEMENT
  # Tautulli - Media play and user monitoring
  tautulli:
    image: lscr.io/linuxserver/tautulli:latest
    container_name: tautulli
    restart: unless-stopped
    depends_on:
      plex:
        condition: service_started
    networks:
      mediaserver:
    environment:
      - PUID=$PUID
      - PGID=$PGID
      - TZ=$TZ
    volumes:
      - $APPDIR/tautulli:/config:rw
    labels:
      - dozzle ## Log viewer
      # HTTP Routers
      - traefik.http.routers.tautulli.entrypoints=https
      - traefik.http.routers.tautulli.rule=Host(`tautulli.$DOMAINNAME`)
      # HTTP Services
      - traefik.http.routers.tautulli.service=tautulli
      - traefik.http.services.tautulli.loadbalancer.server.port=8181
      ## Updating and notifications
      - org.hotio.pullio.notify=true
      - org.hotio.pullio.update=true
      - org.hotio.pullio.discord.webhook=$DISCORD
      - org.hotio.pullio.generic.webhook=$PULLIO
      
  # Overseer - Allows Plex users to request media
  overseerr:
    image: lscr.io/linuxserver/overseerr:latest
    container_name: overseerr
    restart: unless-stopped
    networks:
      mediaserver:
    depends_on:
      plex:
        condition: service_started
    environment:
      - PUID=$PUID
      - PGID=$PGID
      - TZ=$TZ
    volumes:
      - $APPDIR/overseerr:/config
      - $DATADIR/media:/data/media
    labels:
      # HTTP Routers
      - traefik.http.routers.overseerr.entrypoints=https
      - traefik.http.routers.overseerr.rule=Host(`overseerr.$DOMAINNAME`)
      # HTTP Services
      - traefik.http.routers.overseerr.service=overseerr
      - traefik.http.services.overseerr.loadbalancer.server.port=5055
      ## Updating and notifications
      - org.hotio.pullio.notify=true
      - org.hotio.pullio.update=true
      - org.hotio.pullio.discord.webhook=$DISCORD
      - org.hotio.pullio.generic.webhook=$PULLIO
      
  ############################# INTERNET VIDEO DOWNLOADER
  # Metube – Self-hosted YT downloader with GUI
  metube:
    image: ghcr.io/alexta69/metube
    container_name: metube
    restart: unless-stopped
    networks:
      mediaserver:
    environment:
      - UID=$PUID
      - GID=$PGID
      - TZ=$TZ
      - DELETE_FILE_ON_TRASHCAN=true
      - OUTPUT_TEMPLATE=$METUBE
    volumes:
      - $DATADIR/media/youtube:/downloads
      - $DATADIR/media/youtube/cookies:/cookies
    labels:
      # HTTP Routers
      - traefik.http.routers.metube.entrypoints=https
      - traefik.http.routers.metube.rule=Host(`metube.$DOMAINNAME`)
      # Middlewares
      - traefik.http.routers.metube.middlewares=oauth
      # HTTP Services
      - traefik.http.routers.metube.service=metube
      - traefik.http.services.metube.loadbalancer.server.port=8081
      ## Updating and notifications
      - org.hotio.pullio.notify=true
      - org.hotio.pullio.update=true
      - org.hotio.pullio.discord.webhook=$DISCORD
      - org.hotio.pullio.generic.webhook=$PULLIO

  ############################# BOOK LIBRARY MANAGEMENT
  # Calibre Web Automated - fork of Calibre-web, includes auto conversion
  calibreweb:
    image: crocodilestick/calibre-web-automated:latest
    container_name: books
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "nc -z 127.0.0.1 8083 || exit 1"]
      interval: 10s
      timeout: 5s
      retries: 3
      start_period: 90s
    networks:
      mediaserver:
    environment:
      - PUID=$PUID
      - PGID=$PGID
      - TZ=$TZ
      - OAUTHLIB_RELAX_TOKEN_SCOPE=1 #optional, seems necessary for Google oAuth
      - OAUTHLIB_INSECURE_TRANSPORT=1 #insecure, seems necessary for Google oAuth
      - DOCKER_MODS=lscr.io/linuxserver/mods:universal-calibre-v7.16.0
    volumes:
      - $APPDIR/books:/config
      - $DATADIR/imports:/cwa-book-ingest
      - $DATADIR/media/books:/calibre-library
      - $APPDIR/books/custom-files:/custom-cont-init.d:ro
    labels:
      # HTTP Routers
      - traefik.http.routers.books.entrypoints=https
      - traefik.http.routers.books.rule=Host(`books.$DOMAINNAME`)
      # Middlewares
      - traefik.http.routers.books.middlewares=oauth
      # HTTP Services
      - traefik.http.routers.books.service=books
      - traefik.http.services.books.loadbalancer.server.port=8083
      ## Updating and notifications
      - org.hotio.pullio.notify=true
      - org.hotio.pullio.update=true
      - org.hotio.pullio.discord.webhook=$DISCORD
      - org.hotio.pullio.generic.webhook=$PULLIO

  # StirlingPDF - pdf editor, digital signing etc.
  stirling-pdf:
    image: docker.stirlingpdf.com/stirlingtools/stirling-pdf:latest
    container_name: stirlingpdf
    restart: unless-stopped
    networks:
      mediaserver:
    environment:
      - DOCKER_ENABLE_SECURITY=true
      - SECURITY_ENABLELOGIN=true
      - LANGS=en_GB
    volumes:
      - $APPDIR/stirling/trainingData:/usr/share/tessdata # Required for extra OCR languages
      - $APPDIR/stirling/extraConfigs:/configs
      - $APPDIR/stirling/customFiles:/customFiles/
      - $APPDIR/stirling/logs:/logs/
    labels:
      # HTTP Routers
      - traefik.http.routers.stirling.entrypoints=https
      - traefik.http.routers.stirling.rule=Host(`pdf.$DOMAINNAME`)
      # Middlewares
      - traefik.http.routers.stirling.middlewares=oauth
      # HTTP Services
      - traefik.http.routers.stirling.service=sterling
      - traefik.http.services.sterling.loadbalancer.server.port=8080
      ## Updating and notifications
      - org.hotio.pullio.notify=true
      - org.hotio.pullio.update=true
      - org.hotio.pullio.discord.webhook=$DISCORD
      - org.hotio.pullio.generic.webhook=$PULLIO

  ############################# SYSTEM MANAGEMENT/MONITORING
  # Notifiarr - update ARR profiles
  notifiarr:
    image: golift/notifiarr:latest
    container_name: notifiarr
    hostname: notifiarr #must be set, can be anything
    restart: unless-stopped
    networks:
      mediaserver:
    environment:
      - TZ=$TZ
      - DN_API_KEY=$NOTIFIARR
      - USER=docker
    volumes:
      - $APPDIR/notifiarr:/config
    labels:
      - dozzle ## Log viewer
      # HTTP Routers
      - traefik.http.routers.notifiarr.entrypoints=https
      - traefik.http.routers.notifiarr.rule=Host(`notifiarr.$DOMAINNAME`)
      # Middlewares
      - traefik.http.routers.notifiarr.middlewares=oauth
      # HTTP Services
      - traefik.http.routers.notifiarr.service=notifiarr
      - traefik.http.services.notifiarr.loadbalancer.server.port=5454
      ## Updating and notifications
      - org.hotio.pullio.notify=true
      - org.hotio.pullio.update=true
      - org.hotio.pullio.discord.webhook=$DISCORD
      - org.hotio.pullio.generic.webhook=$PULLIO

  # Dozzle - log viewer
  dozzle:
    image: amir20/dozzle:latest
    container_name: dozzle
    restart: unless-stopped
    networks:
      mediaserver:
      socket-proxy:
    environment:
      - DOZZLE_BASE=/
      - DOZZLE_LEVEL=error
      - DOZZLE_FILTER="label=dozzle" # limits logging to containers with this label
      - DOZZLE_TAILSIZE=300
      - DOZZLE_ENABLE_ACTIONS=true
      - TZ=${TZ}
      - DOCKER_HOST=tcp://socket:2375 # necessary unless you add docker.sock as volume
    labels:
      # HTTP Routers
      - traefik.http.routers.dozzle.entrypoints=https
      - traefik.http.routers.dozzle.rule=Host(`dozzle.$DOMAINNAME`)
      # Middlewares
      - traefik.http.routers.dozzle.middlewares=oauth
      # HTTP Services
      - traefik.http.routers.dozzle.service=dozzle
      - traefik.http.services.dozzle.loadbalancer.server.port=8080
      ## Updating and notifications
      - org.hotio.pullio.notify=true
      - org.hotio.pullio.update=true
      - org.hotio.pullio.discord.webhook=$DISCORD
      - org.hotio.pullio.generic.webhook=$PULLIO

  ############################# SECURITY/PASSWORD MANAGEMENT
  # Vaultwarden - Locally-hosted Bitwarden
  vaultwarden:
    image: vaultwarden/server:latest
    container_name: vaultwarden
    restart: unless-stopped
    networks:
      mediaserver:
    environment:
      - PUID=$PUID
      - PGID=$PGID
      - TZ=$TZ
      - PUSH_ENABLED=true
      - PUSH_INSTALLATION_ID=$PUSH_INSTALLATION_ID
      - PUSH_INSTALLATION_KEY=$PUSH_INSTALLATION_KEY
      - LOG_LEVEL=error
      - EXTENDED_LOGGING=false
    volumes:
      - $APPDIR/vaultwarden:/data
      - /etc/localtime:/etc/localtime:ro
    labels:
      - dozzle ## Log viewer
      # HTTP Routers
      - traefik.http.routers.vaultwarden.entrypoints=https
      - traefik.http.routers.vaultwarden.rule=Host(`vaultwarden.$DOMAINNAME`)
      # HTTP Services
      - traefik.http.routers.vaultwarden.service=vaultwarden
      - traefik.http.services.vaultwarden.loadbalancer.server.port=80
      ## Updating and notifications
      - org.hotio.pullio.notify=true
      - org.hotio.pullio.update=true
      - org.hotio.pullio.discord.webhook=$DISCORD
      - org.hotio.pullio.generic.webhook=$PULLIO
